import Game from './game.js';
import EventEmitter from "./eventEmitter.js";

window.toggleDevMode = function() {
    const grid = document.getElementById("cpu-grid");
    grid.classList.toggle("hide-ships");
};

function addClass(element, className) {
    element.classList.add(className);
}

const newGame = new Game();

function createGrid(elementId, board, hideShips = false) {
    const grid = document.getElementById(elementId);
    grid.innerHTML = ""; // Clear grid if regenerating

    for (let row = 0; row < 10; row++) {
        for (let col = 0; col < 10; col++) {
            const cell = document.createElement("div");
            addClass(cell, "cell");

            const content = board[row]?.[col];

            switch (true) {
                case content === null:
                    addClass(cell,"empty");
                    break;
                case content === 'x':
                    addClass(cell,"miss");
                    break;
                case typeof content === "object":
                    if (!hideShips) {
                        addClass(cell,"ship");
                    }
                    if (content.hitPositions.some(([r, c]) => r === row && c === col)) {
                        addClass(cell,"hit");
                    }
                    break;
                default:
                    break;
            }

            grid.appendChild(cell);
        }
    }
}


function logMessage(message) {
    const logDiv = document.getElementById("log");

    const newEntry = document.createElement("p");

    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    newEntry.textContent = `[${timestamp}] ${message}`;
    
    logDiv.appendChild(newEntry);

    // Keep only the last 5 messages
    while (logDiv.children.length > 5) {
        logDiv.removeChild(logDiv.firstChild);
    }

    logDiv.scrollTop = logDiv.scrollHeight;
}



EventEmitter.on("log", logMessage);

EventEmitter.on("render", () => {
    createGrid("player-grid", newGame.player.board.board);
    createGrid("cpu-grid", newGame.cpu.board.board, true);
});

let orientation = "Vertical";

document.getElementById("orientationButton").addEventListener("click", function() {
    orientation = orientation === "Vertical" ? "Horizontal" : "Vertical";
    this.textContent = orientation;
});

newGame.start();